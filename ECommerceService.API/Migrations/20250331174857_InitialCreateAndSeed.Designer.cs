// <auto-generated />
using System;
using ECommerceService.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceService.API.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20250331174857_InitialCreateAndSeed")]
    partial class InitialCreateAndSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 21, 8, 44, 1, 404, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Electronic Items",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 10, 29, 23, 42, 32, 257, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 31, 10, 52, 1, 851, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Clothing Items",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 29, 20, 23, 48, 276, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 4, 11, 35, 57, 321, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Books Items",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 4, 15, 11, 59, 59, 911, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Books"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 1, 27, 17, 23, 47, 710, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Devices and gadgets for everyday use",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 3, 1, 18, 16, 13, 237, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Devices"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 2, 15, 0, 58, 40, 542, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Home and office furnishing items",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 7, 20, 5, 59, 17, 406, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 1, 28, 23, 29, 24, 349, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Apparel for all occasions",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 3, 10, 8, 32, 8, 541, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Outfits"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 29, 9, 24, 19, 607, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Literature and educational materials",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 9, 10, 22, 7, 37, 645, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Journals"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 6, 14, 2, 40, 873, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Household appliances for convenience",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 2, 17, 8, 11, 22, 417, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Appliances"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 12, 12, 2, 7, 47, 504, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Add-ons for tech and lifestyle",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 11, 10, 16, 52, 2, 205, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 22, 14, 36, 51, 720, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Gear and equipment for sports enthusiasts",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 4, 18, 12, 34, 25, 639, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Sports"
                        });
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("DiscountApplied")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 6, 2, 8, 4, 10, 564, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A rich and well-equipped high performance machine",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 30, 15, 34, 45, 103, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Laptop",
                            Price = 1000m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 7, 26, 20, 5, 29, 376, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A pocket friendly and highly efficient telecommunication device",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 12, 27, 5, 0, 5, 616, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Mobile",
                            Price = 500m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 10, 3, 19, 42, 44, 451, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A warm and cold weather outfit for many genders",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 3, 22, 17, 22, 43, 471, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "T-Shirt",
                            Price = 20m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 6, 22, 5, 30, 7, 507, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A lower body covering suitable for various activities",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 2, 4, 6, 28, 4, 692, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Jeans",
                            Price = 50m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 10, 9, 18, 39, 53, 719, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "The Philosopher's stone which looks at the life of Harry",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 5, 13, 13, 7, 30, 199, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Harry Potter: Volume 1",
                            Price = 10m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 24, 0, 10, 11, 232, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A story starring a man with no fears",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 9, 24, 11, 55, 14, 257, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Mission Impossible",
                            Price = 15m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 2, 4, 0, 52, 15, 23, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A story of a determined and resilient warrior",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 3, 28, 5, 48, 32, 240, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "The Alchemist",
                            Price = 65m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 10, 22, 58, 59, 741, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A sleek and powerful mobile device",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 6, 22, 20, 53, 14, 187, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Smartphone",
                            Price = 599.99m,
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 12, 29, 5, 5, 57, 642, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Noise-canceling over-ear audio gear",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 5, 18, 14, 2, 49, 313, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Headphones",
                            Price = 129.50m,
                            StockQuantity = 75
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 6, 6, 21, 8, 35, 358, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Ergonomic chair for long work hours",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 2, 8, 11, 21, 23, 231, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Desk Chair",
                            Price = 199.00m,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 11, 29, 9, 5, 0, 756, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "4K ultra-wide display for productivity",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 7, 15, 3, 3, 9, 746, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Monitor",
                            Price = 349.95m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 7,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 7, 8, 4, 34, 13, 418, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Mechanical keyboard with RGB lighting",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 2, 24, 20, 54, 56, 671, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Keyboard",
                            Price = 89.99m,
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 7,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 3, 28, 23, 17, 34, 584, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Precision gaming mouse with adjustable DPI",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 10, 7, 19, 56, 940, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Mouse",
                            Price = 49.99m,
                            StockQuantity = 180
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 2, 13, 12, 18, 39, 333, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Lightweight tablet for media and work",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 2, 19, 37, 6, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Tablet",
                            Price = 299.00m,
                            StockQuantity = 90
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 9,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 11, 18, 1, 55, 17, 207, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "All-in-one printer with wireless connectivity",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 7, 27, 16, 4, 43, 543, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Printer",
                            Price = 159.75m,
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 8,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 6, 15, 8, 12, 47, 564, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Durable backpack for travel and tech",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 4, 25, 7, 19, 8, 488, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Backpack",
                            Price = 79.50m,
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 10, 21, 16, 35, 16, 974, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Fitness tracker with heart rate monitor",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 12, 12, 21, 38, 1, 9, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Smartwatch",
                            Price = 199.99m,
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 8, 13, 0, 21, 980, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "High-resolution DSLR for photography",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 4, 16, 2, 35, 22, 503, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Camera",
                            Price = 799.00m,
                            StockQuantity = 15
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 7, 12, 20, 29, 937, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Bluetooth speakers with deep bass",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 5, 15, 1, 21, 40, 484, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Speakers",
                            Price = 99.95m,
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 8,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 2, 20, 20, 43, 2, 442, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "High-speed Wi-Fi router for home",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 20, 19, 46, 45, 354, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Router",
                            Price = 129.00m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 10,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 10, 1, 0, 25, 47, 10, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "1TB portable SSD for storage",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 12, 16, 39, 24, 260, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "External Drive",
                            Price = 149.99m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 7,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 59, 19, 419, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Automatic coffee machine with timer",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 3, 19, 19, 31, 41, 968, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Coffee Maker",
                            Price = 89.00m,
                            StockQuantity = 35
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 5, 10, 52, 3, 641, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Next-gen console for immersive gaming",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 4, 26, 10, 13, 37, 648, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Gaming Console",
                            Price = 499.99m,
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 7, 15, 21, 14, 15, 872, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "HD projector for home theater",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 12, 28, 20, 29, 18, 894, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Projector",
                            Price = 399.50m,
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 2, 55, 54, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Lightweight band for step tracking",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 5, 10, 17, 19, 57, 786, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Fitness Band",
                            Price = 39.99m,
                            StockQuantity = 140
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 1, 11, 2, 34, 27, 27, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Adjustable LED lamp for workspace",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 5, 27, 1, 23, 13, 772, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Desk Lamp",
                            Price = 29.95m,
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 12, 14, 8, 11, 10, 59, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Compact microwave for quick meals",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 3, 26, 14, 27, 34, 762, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Microwave",
                            Price = 109.00m,
                            StockQuantity = 45
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("RoleId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ECommerceService.API.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceService.API.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Order", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceService.API.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Product", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
