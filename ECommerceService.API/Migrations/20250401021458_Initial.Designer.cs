// <auto-generated />
using System;
using ECommerceService.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceService.API.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20250401021458_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 30, 4, 8, 25, 880, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Electronic Items",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 11, 28, 5, 19, 24, 390, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 23, 17, 14, 25, 479, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Clothing Items",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 9, 26, 8, 27, 18, 748, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 5, 4, 58, 41, 655, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Books Items",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 9, 25, 5, 28, 17, 460, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Books"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 10, 7, 8, 57, 9, 768, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Devices and gadgets for everyday use",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 7, 29, 20, 39, 35, 921, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Devices"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 7, 22, 13, 58, 6, 256, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Home and office furnishing items",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 3, 26, 12, 30, 56, 296, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 9, 23, 7, 18, 156, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Apparel for all occasions",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 11, 7, 10, 9, 42, 684, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Outfits"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 11, 25, 9, 2, 5, 609, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Literature and educational materials",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 7, 17, 10, 0, 23, 694, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Journals"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 18, 3, 25, 53, 602, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Household appliances for convenience",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 7, 7, 23, 19, 8, 428, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Appliances"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 15, 17, 27, 7, 60, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Add-ons for tech and lifestyle",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 22, 23, 57, 56, 947, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 3, 26, 20, 40, 1, 403, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Gear and equipment for sports enthusiasts",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 12, 16, 2, 36, 32, 536, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Sports"
                        });
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("DiscountApplied")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 11, 16, 15, 17, 12, 361, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A rich and well-equipped high performance machine",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 5, 30, 9, 20, 20, 821, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Laptop",
                            Price = 1000m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 11, 7, 7, 41, 24, 940, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A pocket friendly and highly efficient telecommunication device",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 2, 21, 14, 37, 28, 56, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Mobile",
                            Price = 500m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 11, 26, 15, 2, 27, 79, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A warm and cold weather outfit for many genders",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 9, 22, 2, 49, 58, 491, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "T-Shirt",
                            Price = 20m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 5, 12, 55, 33, 56, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A lower body covering suitable for various activities",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 9, 15, 20, 59, 21, 245, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Jeans",
                            Price = 50m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 12, 55, 35, 954, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "The Philosopher's stone which looks at the life of Harry",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 5, 22, 0, 34, 26, 590, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Harry Potter: Volume 1",
                            Price = 10m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 3, 7, 16, 0, 16, 591, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A story starring a man with no fears",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 3, 30, 16, 17, 21, 148, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Mission Impossible",
                            Price = 15m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 3, 17, 6, 56, 26, 72, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A story of a determined and resilient warrior",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 18, 6, 9, 44, 932, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "The Alchemist",
                            Price = 65m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 6, 10, 7, 6, 18, 214, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "A sleek and powerful mobile device",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 11, 8, 10, 56, 48, 102, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Smartphone",
                            Price = 599.99m,
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 42, 25, 120, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Noise-canceling over-ear audio gear",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 11, 26, 8, 14, 45, 789, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Headphones",
                            Price = 129.50m,
                            StockQuantity = 75
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 6, 23, 22, 36, 1, 570, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Ergonomic chair for long work hours",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 22, 1, 7, 58, 2, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Desk Chair",
                            Price = 199.00m,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 2, 15, 12, 13, 56, 888, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "4K ultra-wide display for productivity",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 6, 29, 10, 8, 13, 669, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Monitor",
                            Price = 349.95m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 7,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 3, 22, 23, 26, 13, 307, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Mechanical keyboard with RGB lighting",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 10, 28, 0, 51, 0, 354, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Keyboard",
                            Price = 89.99m,
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 7,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 7, 24, 17, 10, 27, 629, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Precision gaming mouse with adjustable DPI",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 9, 20, 4, 8, 27, 84, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Mouse",
                            Price = 49.99m,
                            StockQuantity = 180
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 12, 12, 23, 2, 19, 527, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Lightweight tablet for media and work",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 3, 23, 14, 3, 18, 192, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Tablet",
                            Price = 299.00m,
                            StockQuantity = 90
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 9,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 30, 20, 15, 0, 638, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "All-in-one printer with wireless connectivity",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 4, 14, 10, 11, 51, 671, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Printer",
                            Price = 159.75m,
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 8,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 7, 4, 16, 15, 55, 474, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Durable backpack for travel and tech",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 3, 15, 4, 44, 22, 911, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Backpack",
                            Price = 79.50m,
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 18, 1, 46, 47, 509, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Fitness tracker with heart rate monitor",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 7, 2, 1, 4, 15, 348, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Smartwatch",
                            Price = 199.99m,
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 3, 26, 9, 44, 45, 192, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "High-resolution DSLR for photography",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 7, 12, 6, 43, 52, 565, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Camera",
                            Price = 799.00m,
                            StockQuantity = 15
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 6, 1, 9, 40, 5, 100, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Bluetooth speakers with deep bass",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 2, 12, 10, 40, 45, 561, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Speakers",
                            Price = 99.95m,
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 8,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 6, 27, 2, 41, 29, 67, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "High-speed Wi-Fi router for home",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 1, 11, 19, 59, 50, 554, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Router",
                            Price = 129.00m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 10,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 8, 16, 43, 27, 989, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "1TB portable SSD for storage",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 5, 12, 5, 2, 26, 959, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "External Drive",
                            Price = 149.99m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 7,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 10, 3, 18, 38, 687, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Automatic coffee machine with timer",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 4, 9, 5, 54, 748, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Coffee Maker",
                            Price = 89.00m,
                            StockQuantity = 35
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 5, 17, 39, 10, 382, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Next-gen console for immersive gaming",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 11, 4, 7, 33, 31, 163, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Gaming Console",
                            Price = 499.99m,
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 12, 20, 9, 33, 33, 795, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "HD projector for home theater",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 3, 8, 11, 46, 42, 811, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Projector",
                            Price = 399.50m,
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 6, 29, 6, 21, 39, 717, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Lightweight band for step tracking",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 1, 20, 18, 44, 12, 210, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Fitness Band",
                            Price = 39.99m,
                            StockQuantity = 140
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 11, 26, 9, 11, 24, 542, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Adjustable LED lamp for workspace",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2024, 10, 5, 18, 16, 0, 474, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Desk Lamp",
                            Price = 29.95m,
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 7, 1, 15, 10, 41, 526, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Compact microwave for quick meals",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2025, 2, 25, 13, 3, 0, 232, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Microwave",
                            Price = 109.00m,
                            StockQuantity = 45
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ECommerceService.API.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceService.API.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Order", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceService.API.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Product", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerceService.API.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommerceService.API.Domain.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
